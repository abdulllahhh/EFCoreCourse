// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relations;

#nullable disable

namespace Relations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241217180427_change_delete_behavior")]
    partial class change_delete_behavior
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("orderNumber")
                .StartsAt(1000L)
                .IncrementsBy(5);

            modelBuilder.Entity("Relations.DTOs.BookDTO", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("authorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Relations.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Gabrial jesus",
                            NationalityId = 2000
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Abdullah Ibrahim",
                            NationalityId = 3000
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "cr7",
                            NationalityId = 2000
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "Messi",
                            NationalityId = 5000
                        },
                        new
                        {
                            AuthorId = 5,
                            Name = "abo treka",
                            NationalityId = 1000
                        });
                });

            modelBuilder.Entity("Relations.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 2,
                            Name = "",
                            Price = 20f
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 3,
                            Name = "head first dp",
                            Price = 20f
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 4,
                            Name = "head first ooa&d",
                            Price = 20f
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 5,
                            Name = "grokking algorithm",
                            Price = 20f
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 2,
                            Name = "c# in a nutshell",
                            Price = 20f
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 3,
                            Name = "pro c# .net development",
                            Price = 20f
                        });
                });

            modelBuilder.Entity("Relations.Models.MOCK_DATA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MOCK_DATAs");
                });

            modelBuilder.Entity("Relations.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationalityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            NationalityId = 1000,
                            Name = "Russian"
                        },
                        new
                        {
                            NationalityId = 2000,
                            Name = "Colombian"
                        },
                        new
                        {
                            NationalityId = 3000,
                            Name = "American"
                        },
                        new
                        {
                            NationalityId = 4000,
                            Name = "britsh"
                        },
                        new
                        {
                            NationalityId = 5000,
                            Name = "Egyptian"
                        });
                });

            modelBuilder.Entity("Relations.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ammount")
                        .HasColumnType("int");

                    b.Property<int>("orderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR orderNumber");

                    b.HasKey("OrderId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Relations.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "10",
                            Content = "very much content",
                            Title = "title test",
                            isDeleted = false
                        },
                        new
                        {
                            Id = "9",
                            Content = "Content of first post",
                            Title = "First Post",
                            isDeleted = false
                        },
                        new
                        {
                            Id = "2",
                            Content = "Content of second post",
                            Title = "Second Post",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("Relations.Models.PostTag", b =>
                {
                    b.Property<string>("postId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tagId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("postId", "tagId");

                    b.HasIndex("tagId");

                    b.ToTable("PostTag");

                    b.HasData(
                        new
                        {
                            postId = "10",
                            tagId = "1",
                            AddedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            postId = "9",
                            tagId = "25",
                            AddedOn = new DateTime(2024, 12, 17, 20, 4, 27, 336, DateTimeKind.Local).AddTicks(570)
                        },
                        new
                        {
                            postId = "9",
                            tagId = "2",
                            AddedOn = new DateTime(2024, 12, 17, 20, 4, 27, 336, DateTimeKind.Local).AddTicks(626)
                        },
                        new
                        {
                            postId = "2",
                            tagId = "25",
                            AddedOn = new DateTime(2024, 12, 17, 20, 4, 27, 336, DateTimeKind.Local).AddTicks(629)
                        });
                });

            modelBuilder.Entity("Relations.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "1"
                        },
                        new
                        {
                            Id = "25"
                        },
                        new
                        {
                            Id = "2"
                        });
                });

            modelBuilder.Entity("Relations.Models.Author", b =>
                {
                    b.HasOne("Relations.Models.Nationality", "nationality")
                        .WithMany("authors")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("nationality");
                });

            modelBuilder.Entity("Relations.Models.Book", b =>
                {
                    b.HasOne("Relations.Models.Author", "Author")
                        .WithMany("books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Relations.Models.Post", b =>
                {
                    b.HasOne("Relations.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Relations.Models.PostTag", b =>
                {
                    b.HasOne("Relations.Models.Post", "post")
                        .WithMany("postTags")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Relations.Models.Tag", "Tag")
                        .WithMany("postTags")
                        .HasForeignKey("tagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("post");
                });

            modelBuilder.Entity("Relations.Models.Author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("Relations.Models.Nationality", b =>
                {
                    b.Navigation("authors");
                });

            modelBuilder.Entity("Relations.Models.Post", b =>
                {
                    b.Navigation("postTags");
                });

            modelBuilder.Entity("Relations.Models.Tag", b =>
                {
                    b.Navigation("postTags");
                });
#pragma warning restore 612, 618
        }
    }
}
